{"version":3,"sources":["App.constants.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS","getBoxInitialState","Array","fill","map","App","useState","selectedColor","setSelectedColor","boxColors","setBoxColors","className","currentRow","rowIndex","box","columnIndex","style","backgroundColor","onClick","row","column","newBoxColors","boxClickHandler","index","boxColor","length","selectedColorIndex","findIndex","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NACaA,EAAS,CAAC,OAAQ,cAAe,YAAa,SAAU,SACrE,QAAS,YAAa,cAKTC,EAAqB,kBAAMC,MAHf,GAGgCC,OAAOC,KAAI,kBAAMF,MAF9C,GAEkEC,KAAK,a,eCqEpFE,MAlEf,WAEE,MAA0CC,mBAASN,EAAO,IAA1D,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,mBAASL,KAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAYA,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,eAAf,UAEIF,EAAUL,KAAI,SAACQ,EAAYC,GACvB,OACE,qBAAKF,UAAU,MAAf,SAEIC,EAAWR,KAAI,SAACU,EAAKC,GAAN,OACb,sBAEEJ,UAAS,cAASE,EAAW,IDjC9B,ECiCgD,gBAAkB,IACjEG,MAAO,CACLC,gBAAiBR,EAAUI,GAAUE,IAEvCG,QAAS,kBA1BT,SAACC,EAAKC,GAC5B,IAAMC,EAAY,YAAOZ,GACzBY,EAAaF,GAAKC,GAAUb,EAC5BG,EAAaW,GAuBwBC,CAAgBT,EAAUE,KAN3C,UACUF,EADV,YACsBE,YAapC,qBAAKJ,UAAU,kBAAf,SAEIT,MD9Cc,GC8CMC,OAAOC,KAAI,SAACU,EAAKS,GAEnC,IAAMC,EAAWxB,EAAOuB,EAAQvB,EAAOyB,QACjCC,EAAqB1B,EAAO2B,WAAU,SAACC,GAAD,OAAWA,IAAUrB,KAEjE,OACE,sBAEEI,UAAS,0BAAqBY,IAAUG,EAAqB,cAAgB,IAC7EV,MAAO,CAAEC,gBAAiBO,GAC1BN,QAAS,kBAAMV,EAAiBgB,KAH3BD,WAUjB,qBAAKZ,UAAU,eAAeO,QA/Cf,WACnBR,EAAaT,MA8CT,yBCxDO4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c3246ee.chunk.js","sourcesContent":["\nexport const COLORS = ['blue', 'springgreen', 'royalblue', 'orange', 'violet',\n'brown', 'chocolate', 'darksalmon'];\n\nexport const rowNumber = 8;\nexport const columnNumber = 8;\n\nexport const getBoxInitialState = () => Array(rowNumber).fill().map(() => Array(columnNumber).fill('white'));\n","import React, { useState } from 'react'\nimport {\n  COLORS,\n  rowNumber,\n  columnNumber,\n  getBoxInitialState,\n} from './App.constants';\nimport './App.css';\n\n\nfunction App() {\n\n  const [selectedColor, setSelectedColor] = useState(COLORS[0]);\n  const [boxColors, setBoxColors] = useState(getBoxInitialState());\n\n  const boxClickHandler = (row, column) => {\n    const newBoxColors = [...boxColors];\n    newBoxColors[row][column] = selectedColor;\n    setBoxColors(newBoxColors);\n  }\n\n  const resetHandler = () => {\n    setBoxColors(getBoxInitialState());\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"canvas-wrapper\">\n        <div className=\"canvas-board\">\n          {\n            boxColors.map((currentRow, rowIndex) => {\n                return (\n                  <div className=\"row\">\n                    {\n                      currentRow.map((box, columnIndex) => (\n                        <span\n                          key={`${rowIndex}-${columnIndex}`}\n                          className={`box ${rowIndex + 1 === rowNumber ? 'lastRowStyles' : ''}`}\n                          style={{\n                            backgroundColor: boxColors[rowIndex][columnIndex]\n                          }}\n                          onClick={() => boxClickHandler(rowIndex, columnIndex)}\n                        />\n                      ))\n                    }\n                  </div>\n                )\n            })\n          }\n          <div className=\"row drawing-row\">\n            {\n              Array(columnNumber).fill().map((box, index) => {\n\n                const boxColor = COLORS[index % COLORS.length]\n                const selectedColorIndex = COLORS.findIndex((color) => color === selectedColor)\n                \n                return (\n                  <span\n                    key={index}\n                    className={`box drawing-box ${index === selectedColorIndex ? 'selectedBox' : ''}`}\n                    style={{ backgroundColor: boxColor }}\n                    onClick={() => setSelectedColor(boxColor)}\n                  />\n                )\n              })\n            }\n          </div>\n        </div>\n        <div className='reset-button' onClick={resetHandler}>\n          RESET\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}